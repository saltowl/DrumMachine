{"version":3,"sources":["components/PadElement.js","components/Pad.js","data.js","components/DrumMachine.js","App.js","serviceWorker.js","store/actions.js","store/reducers.js","index.js"],"names":["PadElement","props","handleClick","bind","handleDoubleClick","document","addEventListener","this","handleKeyPress","removeEventListener","playSound","keyName","loopSound","className","onClick","id","onDoubleClick","src","name","React","Component","Pad","pad","data","forEach","obj","i","element","key","push","gap","allSounds","keyNames","padData","length","j","replace","INITIAL_STATE","PLAY_SOUND","LOOP_SOUND","HANDLE_KEY_PRESS","HANDLE_SET_CHANGE","HANDLE_VOLUME_CHANGE","DrumMachine","state","width","window","innerWidth","height","innerHeight","handleSetChange","handleVolumeChange","updateDimensions","event","target","value","setState","startSetIndex","currentSet","currentData","slice","gridClasses","currentSound","htmlFor","type","min","max","step","currentVolume","onChange","App","Boolean","location","hostname","match","reducers","combineReducers","rootReducer","action","newState","Object","assign","store","createStore","applyMiddleware","thunk","Container","connect","dispatch","getElementById","prevKey","getElementsByClassName","classList","remove","offsetWidth","add","sound","firstElementChild","currentTime","play","loop","String","fromCharCode","keyCode","set","volumeVal","call","volume","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe8a1a45.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass PadElement extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleDoubleClick = this.handleDoubleClick.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.props.handleKeyPress);\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keydown', this.props.handleKeyPress);\r\n    }\r\n    handleClick() {\r\n        this.props.playSound(this.props.keyName);\r\n    }\r\n    handleDoubleClick() {\r\n        this.props.loopSound(this.props.keyName);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={'drum-pad d-flex justify-content-center align-items-center'} onClick={this.handleClick} id={this.props.keyName} onDoubleClick={this.handleDoubleClick}>\r\n                <audio src={this.props.src} id={this.props.name} className={'clip'}/>\r\n                {this.props.keyName}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PadElement;","import React from 'react';\r\nimport PadElement from './PadElement';\r\n\r\nclass Pad extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        const pad = [];\r\n        this.props.data.forEach((obj, i) => {\r\n            let element = (\r\n                <div className={'col'} key={obj.name}>\r\n                    <PadElement\r\n                        src={obj.src}\r\n                        name={obj.name}\r\n                        keyName={obj.keyName}\r\n                        handleKeyPress={this.props.handleKeyPress}\r\n                        playSound={this.props.playSound}\r\n                        loopSound={this.props.loopSound}\r\n                    />\r\n                </div>\r\n            );\r\n            pad.push(element);\r\n            if (i % 3 === 2) {\r\n                const gap = (<div className=\"w-100\" key={obj.name + 'gap'}/>);\r\n                pad.push(gap);\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div className={'container'} id={'pad'}>\r\n                <div className={'row'}>\r\n                    {pad}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pad;","function CreatePadData(keyName, name) {\r\n    return {\r\n        keyName,\r\n        name,\r\n        src: 'https://freewavesamples.com/files/' + name.replace(/[ ]/g, '-') + '.wav'\r\n    };\r\n}\r\n\r\nexport const KEYS_NUMBER = 9;\r\nconst allSounds = ['Bass Drum 1', 'Bass Drum 2', 'Bass Drum 3', 'Boom Kick', 'Deep Kick', 'E-Mu Proteus FX 909 Kick', 'E-Mu Proteus FX Wacky Kick', 'Electronic Kick 1', 'Electronic Kick 2',\r\n'1980s Casio Piano C5', 'Alesis Fusion Bright Acoustic Piano C6', 'Casio MT-45 Piano C4', 'E-Mu Proteus FX Pianotar C3', 'Ensoniq ESQ-1 Piano C3', 'Alesis Fusion Nylon String Guitar C4', 'Ensoniq SQ-1 ClassicGuitar C5', 'Kawai K5000W NylonGt1 C4', 'Kawai K5000W SteelGt1 C3',\r\n'Crash Cymbal 1', 'Crash Cymbal 5', 'Closed Hi-Hat 2', 'Ensoniq SQ-1 Open Hi-Hat', 'Ensoniq SQ-1 Ride Cymbal', 'Claves', 'Alesis Fusion Recorder C5', 'Electro Tom', 'Alesis Fusion English Horn C5'];\r\nconst keyNames = ['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C'];\r\nconst padData = [];\r\nfor (let i = 0; i < allSounds.length / KEYS_NUMBER; i++) {\r\n    for (let j = 0; j < KEYS_NUMBER; j++) {\r\n        padData.push(CreatePadData(keyNames[j], allSounds[KEYS_NUMBER * i + j]));\r\n    }\r\n}\r\n\r\nexport const INITIAL_STATE = {\r\n    'rootReducer': {\r\n        'data': padData,\r\n        'currentSound': '',\r\n        'currentSet': 0,\r\n        'currentVolume': 0.2\r\n    }\r\n};\r\n\r\nexport const PLAY_SOUND = 'PLAY_SOUND';\r\nexport const LOOP_SOUND = 'LOOP_SOUND';\r\nexport const HANDLE_KEY_PRESS = 'HANDLE_KEY_PRESS';\r\nexport const HANDLE_SET_CHANGE = 'HANDLE_SET_CHANGE';\r\nexport const HANDLE_VOLUME_CHANGE = 'HANDLE_VOLUME_CHANGE';","import React from 'react';\r\nimport Pad from './Pad';\r\nimport {KEYS_NUMBER} from '../data';\r\n\r\nclass DrumMachine extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        };\r\n\r\n        this.handleSetChange = this.handleSetChange.bind(this);\r\n        this.handleVolumeChange = this.handleVolumeChange.bind(this);\r\n        this.updateDimensions = this.updateDimensions.bind(this);\r\n    }\r\n\r\n    handleSetChange(event) {\r\n        this.props.handleSetChange(event.target.value);\r\n    }\r\n\r\n    handleVolumeChange(event) {\r\n        this.props.handleVolumeChange(event.target.value);\r\n    }\r\n\r\n    updateDimensions() {\r\n        this.setState({width: window.innerWidth, height: window.innerHeight});\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.updateDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateDimensions);\r\n    }\r\n\r\n    render() {\r\n        const startSetIndex = this.props.currentSet * KEYS_NUMBER;\r\n        const currentData = this.props.data.slice(startSetIndex, startSetIndex + KEYS_NUMBER);\r\n\r\n        const gridClasses = this.state.width <= 550 ? [\r\n            'row row__C', 'row row__A', 'row row__B', 'col wrapper', 'col'\r\n        ] : [\r\n            'col', 'col', 'col', 'row', 'row'\r\n        ];\r\n        return (\r\n            <div id={'drum-machine'} className={'container'}>\r\n                <h1 className={'text-center'}>Double click on any pad element loops sound</h1>\r\n                <div className={gridClasses[3]}>\r\n                    <div className={gridClasses[0]}>\r\n                        <Pad\r\n                            handleKeyPress={this.props.handleKeyPress}\r\n                            playSound={this.props.playSound}\r\n                            loopSound={this.props.loopSound}\r\n                            data={currentData}\r\n                        />\r\n                    </div>\r\n                    <div className={gridClasses[1]}>\r\n                        <div className={'container w-100'}>\r\n                            <div id={'display'} className={'d-flex justify-content-center align-items-center'}>{this.props.currentSound}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={gridClasses[2]}>\r\n                        <div className={gridClasses[4]}>\r\n                            <div id={'volume'}>\r\n                                <label htmlFor=\"formControlRange\">Volume</label>\r\n                                <input type=\"range\" className=\"form-control-range\" id=\"formControlRange\" min={0} max={1}\r\n                                       step={0.01} value={this.props.currentVolume} onChange={this.handleVolumeChange}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className={gridClasses[4]}>\r\n                            <div id={'set'}>\r\n                                <select className=\"custom-select\" id={'set-selector'}\r\n                                        onChange={this.handleSetChange}>\r\n                                    <option value=\"0\">First set</option>\r\n                                    <option value=\"1\">Second set</option>\r\n                                    <option value=\"2\">Third set</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrumMachine;","import React from 'react';\nimport './App.css';\nimport DrumMachine from './components/DrumMachine'\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n        <div id={'app'}>\n          <DrumMachine\n              data={this.props.data}\n              handleKeyPress={this.props.handleKeyPress}\n              playSound={this.props.playSound}\n              handleSetChange={this.props.handleSetChange}\n              handleVolumeChange={this.props.handleVolumeChange}\n              loopSound={this.props.loopSound}\n              currentSound={this.props.currentSound}\n              currentSet={this.props.currentSet}\n              currentVolume={this.props.currentVolume}\n          />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as data from '../data';\r\n\r\nconst handleKeyPress = (currentSound) => {\r\n    return {\r\n        type: data.HANDLE_KEY_PRESS,\r\n        currentSound\r\n    }\r\n};\r\n\r\nconst playSound = (currentSound) => {\r\n    return {\r\n        type: data.PLAY_SOUND,\r\n        currentSound\r\n    }\r\n};\r\n\r\nconst loopSound = () => {\r\n  return {\r\n      type: data.LOOP_SOUND\r\n  };\r\n};\r\n\r\nconst handleSetChange = (currentSet) => {\r\n    return {\r\n        type: data.HANDLE_SET_CHANGE,\r\n        currentSet\r\n    }\r\n};\r\n\r\nconst handleVolumeChange = (currentVolume) => {\r\n    return {\r\n        type: data.HANDLE_VOLUME_CHANGE,\r\n        currentVolume\r\n    };\r\n};\r\n\r\nexport const mapStateToProps = (state) => {\r\n    return {\r\n        data: state.rootReducer.data,\r\n        currentSound: state.rootReducer.currentSound,\r\n        currentSet: state.rootReducer.currentSet,\r\n        currentVolume: state.rootReducer.currentVolume\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = (dispatch) => {\r\n    const pressedKeyClass = 'pressedKey';\r\n    return {\r\n        playSound: (keyName) => {\r\n            const key = document.getElementById(keyName);\r\n\r\n            const prevKey = document.getElementsByClassName(pressedKeyClass)[0];\r\n            if (prevKey) {\r\n                prevKey.classList.remove(pressedKeyClass);\r\n\r\n                if (prevKey.id === key.id) {\r\n                    void prevKey.offsetWidth;\r\n                }\r\n            }\r\n\r\n            key.classList.add(pressedKeyClass);\r\n\r\n            const sound = key.firstElementChild;\r\n            sound.currentTime = 0;\r\n            sound.play();\r\n            dispatch(playSound(sound.id));\r\n        },\r\n        loopSound: (keyName) => {\r\n            const sound = document.getElementById(keyName).firstElementChild;\r\n            sound.loop = !sound.loop;\r\n            dispatch(loopSound());\r\n        },\r\n        handleKeyPress: (event) => {\r\n            const key = document.getElementById(String.fromCharCode(event.keyCode));\r\n            if (key) {\r\n                const prevKey = document.getElementsByClassName(pressedKeyClass)[0];\r\n                if (prevKey) {\r\n                    prevKey.classList.remove(pressedKeyClass);\r\n\r\n                    if (prevKey.id === key.id) {\r\n                        void prevKey.offsetWidth;\r\n                    }\r\n                }\r\n                key.classList.add(pressedKeyClass);\r\n\r\n                const sound = key.firstElementChild;\r\n                sound.currentTime = 0;\r\n                sound.play();\r\n                dispatch(handleKeyPress(sound.id));\r\n            }\r\n        },\r\n        handleSetChange: (set) => {\r\n            dispatch(handleSetChange(set));\r\n        },\r\n        handleVolumeChange: (volumeVal) => {\r\n            [].slice.call(document.getElementsByClassName('clip')).forEach((sound) => {\r\n               sound.volume = volumeVal;\r\n            });\r\n            dispatch(handleVolumeChange(volumeVal));\r\n        }\r\n    };\r\n};","import {combineReducers} from 'redux';\r\nimport * as data from '../data';\r\n\r\nfunction rootReducer(state = data.INITIAL_STATE, action = {}) {\r\n    let newState = Object.assign({}, state);\r\n    switch (action.type) {\r\n        case data.HANDLE_KEY_PRESS:\r\n        case data.PLAY_SOUND:\r\n            newState.currentSound = action.currentSound;\r\n            return newState;\r\n        case data.HANDLE_SET_CHANGE:\r\n            newState.currentSet = action.currentSet;\r\n            return newState;\r\n        case data.HANDLE_VOLUME_CHANGE:\r\n            newState.currentVolume = action.currentVolume;\r\n            return newState;\r\n        case data.LOOP_SOUND:\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst reducers = combineReducers({rootReducer});\r\n\r\nexport default reducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {mapStateToProps, mapDispatchToProps} from './store/actions'\n\nimport {applyMiddleware, createStore} from 'redux';\nimport { Provider, connect } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducers from './store/reducers';\nimport {INITIAL_STATE} from './data'\n\nconst store = createStore(\n    reducers,\n    INITIAL_STATE,\n    applyMiddleware(thunk)\n);\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(App);\n\nReactDOM.render(\n    <Provider store={store}>\n        <Container/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}